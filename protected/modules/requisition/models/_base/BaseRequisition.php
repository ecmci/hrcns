<?php

/**
 * This is the model base class for the table "requisition".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "RequisitionTemp".
 *
 * Columns in table "requisition" available as properties of the model,
 * followed by relations of table "requisition" available as properties of the model.
 *
 * @property integer $idREQUISITION
 * @property integer $REQTYPE_idREQTYPE
 * @property integer $FACILITY_idFACILITY
 * @property integer $PRIORITY_idPRIORITY
 * @property string $priority_reason
 * @property integer $STATUS_idSTATUS
 * @property string $title
 * @property string $preferred_vendor
 * @property string $project_name
 * @property string $service_description
 * @property integer $USER_idUSER_sign_req
 * @property string $date_posted
 * @property integer $USER_idUSER_sign_fceo
 * @property string $date_sign_fceo
 * @property string $note_fceo
 * @property integer $USER_idUSER_sign_admin
 * @property string $date_sign_admin
 * @property string $note_admin
 * @property integer $USER_idUSER_sign_apmnl
 * @property string $date_sign_apmnl
 * @property string $note_apmnl
 * @property integer $USER_idUSER_sign_apcorp
 * @property string $date_sign_apcorp
 * @property string $note_apcorp
 * @property integer $USER_idUSER_sign_apceo
 * @property string $date_sign_apceo
 * @property string $note_apceo
 * @property integer $USER_idUSER_sign_purch
 * @property string $date_sign_purch
 * @property string $note_purch
 * @property integer $USER_idUSER_sign_rcvr
 * @property string $date_sign_rcvr
 * @property string $note_rcvr
 * @property integer $USER_idUSER_sign_apinv
 * @property string $date_sign_apinv
 * @property string $note_apinv
 * @property integer $price_checked
 * @property string $po_num
 * @property string $order_date
 * @property string $estimated_delivery_date
 * @property string $confirmation_number
 * @property string $completion_date
 * @property integer $is_billed
 * @property string $invoice_number
 * @property string $cancel_reason
 * @property string $datetime_cancel
 * @property integer $USER_idUSER_cancel
 *
 * @property AttachmentDecApceo[] $attachmentDecApceos
 * @property AttachmentDecApcorp[] $attachmentDecApcorps
 * @property AttachmentDecApmnl[] $attachmentDecApmnls
 * @property AttachmentFacAdmin[] $attachmentFacAdmins
 * @property AttachmentInv[] $attachmentInvs
 * @property AttachmentOrder[] $attachmentOrders
 * @property AttachmentReq[] $attachmentReqs
 * @property ReqDecision[] $reqDecisions
 * @property ReqItemsPurchase[] $reqItemsPurchases
 * @property ReqItemsService[] $reqItemsServices
 * @property ReqOrder[] $reqOrders
 * @property Reqtype $rEQTYPEIdREQTYPE
 * @property Facility $fACILITYIdFACILITY
 * @property Priority $pRIORITYIdPRIORITY
 * @property Status $sTATUSIdSTATUS
 * @property User $uSERIdUSERSignReq
 * @property User $uSERIdUSERSignFceo
 * @property User $uSERIdUSERSignAdmin
 * @property User $uSERIdUSERSignApmnl
 * @property User $uSERIdUSERSignApcorp
 * @property User $uSERIdUSERSignApceo
 * @property User $uSERIdUSERSignPurch
 * @property User $uSERIdUSERSignRcvr
 * @property User $uSERIdUSERSignApinv
 */
abstract class BaseRequisition extends GxActiveRecord {


	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'requisition';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Request|Requests', $n);
	}

	public static function representingColumn() {
		return 'title';
	}

	public function rules() {
		return array(
			array('PRIORITY_idPRIORITY', 'requisition.extensions.YiiConditionalValidator.YiiConditionalValidator',
				'validation'=>array('compare', 'compareValue'=>1),//hardcoded value from table priority
				'dependentValidations'=>array(
					'priority_reason'=>array(
						array('required','message'=>'{dependentAttribute} is required when {attribute} is high-priority.'),
					),
				),
			),
			array('FACILITY_idFACILITY, PRIORITY_idPRIORITY', 'required'),
			array('REQTYPE_idREQTYPE, FACILITY_idFACILITY, PRIORITY_idPRIORITY, title, preferred_vendor', 'required','on'=>'createpo'),
			array('project_name, preferred_vendor, service_description', 'required','on'=>'createso'),
			array('note_admin', 'required','on'=>'signfacility'),
			array('po_num', 'required','on'=>'signapmnl'),
			array('note_apcorp', 'required','on'=>'signapcorp'),			
			array('order_date, estimated_delivery_date, confirmation_number', 'required','on'=>'signpurch'),
			array('completion_date, confirmation_number', 'required','on'=>'signpurchso'),
			//array('invoice_number', 'required','on'=>'signinv'),			
			
			array('REQTYPE_idREQTYPE', 'requisition.extensions.YiiConditionalValidator.YiiConditionalValidator',
				'validation'=>array('compare', 'compareValue'=>1),//hardcoded value from table priority
				'on' => 'signinv',
				'dependentValidations'=>array(
					'invoice_number'=>array(
						array('required','on'=>'signinv','message'=>'{dependentAttribute} is required when {attribute} is purchase.'),
					),
				),
			),
			
			array('REQTYPE_idREQTYPE, FACILITY_idFACILITY, PRIORITY_idPRIORITY, STATUS_idSTATUS, USER_idUSER_sign_req, USER_idUSER_sign_fceo, USER_idUSER_sign_admin, USER_idUSER_sign_apmnl, USER_idUSER_sign_apcorp, USER_idUSER_sign_apceo, USER_idUSER_sign_purch, USER_idUSER_sign_rcvr, USER_idUSER_sign_apinv, price_checked, is_billed, USER_idUSER_cancel, has_agreed_tos', 'numerical', 'integerOnly'=>true),
			array('priority_reason, title, preferred_vendor, confirmation_number, invoice_number', 'length', 'max'=>100),
			array('project_name', 'length', 'max'=>250),
			array('po_num', 'length', 'max'=>10),
			array('service_description, date_posted, date_sign_fceo, note_fceo, date_sign_admin, note_admin, date_sign_apmnl, note_apmnl, date_sign_apcorp, note_apcorp, date_sign_apceo, note_apceo, date_sign_purch, note_purch, date_sign_rcvr, note_rcvr, date_sign_apinv, note_apinv, order_date, estimated_delivery_date, completion_date, cancel_reason, datetime_cancel', 'safe'),
			array('priority_reason, STATUS_idSTATUS, project_name, service_description, USER_idUSER_sign_req, date_posted, USER_idUSER_sign_fceo, date_sign_fceo, note_fceo, USER_idUSER_sign_admin, date_sign_admin, note_admin, USER_idUSER_sign_apmnl, date_sign_apmnl, note_apmnl, USER_idUSER_sign_apcorp, date_sign_apcorp, note_apcorp, USER_idUSER_sign_apceo, date_sign_apceo, note_apceo, USER_idUSER_sign_purch, date_sign_purch, note_purch, USER_idUSER_sign_rcvr, date_sign_rcvr, note_rcvr, USER_idUSER_sign_apinv, date_sign_apinv, note_apinv, price_checked, po_num, order_date, estimated_delivery_date, confirmation_number, completion_date, is_billed, invoice_number, cancel_reason, datetime_cancel, USER_idUSER_cancel, has_agreed_tos', 'default', 'setOnEmpty' => true, 'value' => null),
			array('idREQUISITION, REQTYPE_idREQTYPE, FACILITY_idFACILITY, PRIORITY_idPRIORITY, priority_reason, STATUS_idSTATUS, title, preferred_vendor, project_name, service_description, USER_idUSER_sign_req, date_posted, USER_idUSER_sign_fceo, date_sign_fceo, note_fceo, USER_idUSER_sign_admin, date_sign_admin, note_admin, USER_idUSER_sign_apmnl, date_sign_apmnl, note_apmnl, USER_idUSER_sign_apcorp, date_sign_apcorp, note_apcorp, USER_idUSER_sign_apceo, date_sign_apceo, note_apceo, USER_idUSER_sign_purch, date_sign_purch, note_purch, USER_idUSER_sign_rcvr, date_sign_rcvr, note_rcvr, USER_idUSER_sign_apinv, date_sign_apinv, note_apinv, price_checked, po_num, order_date, estimated_delivery_date, confirmation_number, completion_date, is_billed, invoice_number, cancel_reason, datetime_cancel, USER_idUSER_cancel, has_agreed_tos', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'attachmentInvs' => array(self::HAS_MANY, 'AttachmentInv', 'REQUISITION_idREQUISITION'),
			'attachmentFacAdmins' => array(self::HAS_MANY, 'AttachmentFacAdmin', 'REQ_idREQ'),
			'attachmentDecApceos' => array(self::HAS_MANY, 'AttachmentDecApceo', 'REQUISITION_idREQUISITION'),
			'attachmentDecApcorps' => array(self::HAS_MANY, 'AttachmentDecApcorp', 'REQUISITION_idREQUISITION'),
			'attachmentDecApmnls' => array(self::HAS_MANY, 'AttachmentDecApmnl', 'REQUISITION_idREQUISITION'),
			'attachmentOrders' => array(self::HAS_MANY, 'AttachmentOrder', 'REQUISITION_idREQUISITION'),
			'attachmentReqs' => array(self::HAS_MANY, 'AttachmentReq', 'REQUISITION_idREQUISITION'),
			'reqDecisions' => array(self::HAS_ONE, 'ReqDecision', 'REQUISITION_idREQUISITION'),
			'reqItemsPurchases' => array(self::HAS_MANY, 'ReqItemsPurchase', 'REQUISITION_idREQUISITION'),
			'reqItemsServices' => array(self::HAS_MANY, 'ReqItemsService', 'REQUISITION_idREQUISITION'),
			'reqOrders' => array(self::HAS_ONE, 'ReqOrder', 'REQUISITION_idREQUISITION'),
			'rEQTYPEIdREQTYPE' => array(self::BELONGS_TO, 'ReqType', 'REQTYPE_idREQTYPE'),
			'uSERIdUSERCancel' => array(self::BELONGS_TO, 'User', 'USER_idUSER_cancel'),
			'fACILITYIdFACILITY' => array(self::BELONGS_TO, 'Facility', 'FACILITY_idFACILITY'),
			'pRIORITYIdPRIORITY' => array(self::BELONGS_TO, 'Priority', 'PRIORITY_idPRIORITY'),
			'sTATUSIdSTATUS' => array(self::BELONGS_TO, 'Status', 'STATUS_idSTATUS'),
			'uSERIdUSERSignReq' => array(self::BELONGS_TO, 'User', 'USER_idUSER_sign_req'),
			'uSERIdUSERSignFceo' => array(self::BELONGS_TO, 'User', 'USER_idUSER_sign_fceo'),
			'uSERIdUSERSignAdmin' => array(self::BELONGS_TO, 'User', 'USER_idUSER_sign_admin'),
			'uSERIdUSERSignApmnl' => array(self::BELONGS_TO, 'User', 'USER_idUSER_sign_apmnl'),
			'uSERIdUSERSignApcorp' => array(self::BELONGS_TO, 'User', 'USER_idUSER_sign_apcorp'),
			'uSERIdUSERSignApceo' => array(self::BELONGS_TO, 'User', 'USER_idUSER_sign_apceo'),
			'uSERIdUSERSignPurch' => array(self::BELONGS_TO, 'User', 'USER_idUSER_sign_purch'),
			'uSERIdUSERSignRcvr' => array(self::BELONGS_TO, 'User', 'USER_idUSER_sign_rcvr'),
			'uSERIdUSERSignApinv' => array(self::BELONGS_TO, 'User', 'USER_idUSER_sign_apinv'),
			'uSERIdUSERCancel' => array(self::BELONGS_TO, 'User', 'USER_idUSER_cancel'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'idREQUISITION' => Yii::t('app', 'Request ID'),
			'REQTYPE_idREQTYPE' => Yii::t('app', 'Request Type'),
			'FACILITY_idFACILITY' => null,
			'PRIORITY_idPRIORITY' => null,
			'priority_reason' => Yii::t('app', 'Priority Reason'),
			'STATUS_idSTATUS' => null,
			'title' => Yii::t('app', 'Title'),
			'preferred_vendor' => Yii::t('app', 'Preferred Vendor'),
			'project_name' => Yii::t('app', 'Project Name'),
			'service_description' => Yii::t('app', 'Service Description'),
			'USER_idUSER_sign_req' => Yii::t('app', 'Initiated By'),
			'date_posted' => Yii::t('app', 'Date Posted'),
			'USER_idUSER_sign_fceo' => null,
			'date_sign_fceo' => Yii::t('app', 'Date Sign Fceo'),
			'note_fceo' => Yii::t('app', 'Note'),
			'USER_idUSER_sign_admin' => null,
			'date_sign_admin' => Yii::t('app', 'Date Sign Admin'),
			'note_admin' => Yii::t('app', 'Note'),
			'USER_idUSER_sign_apmnl' => null,
			'date_sign_apmnl' => Yii::t('app', 'Date Sign Apmnl'),
			'note_apmnl' => Yii::t('app', 'Note'),
			'USER_idUSER_sign_apcorp' => null,
			'date_sign_apcorp' => Yii::t('app', 'Date Sign Apcorp'),
			'note_apcorp' => Yii::t('app', 'Note'),
			'USER_idUSER_sign_apceo' => null,
			'date_sign_apceo' => Yii::t('app', 'Date Sign Apceo'),
			'note_apceo' => Yii::t('app', 'Note'),
			'USER_idUSER_sign_purch' => null,
			'date_sign_purch' => Yii::t('app', 'Date Sign Purch'),
			'note_purch' => Yii::t('app', 'Note'),
			'USER_idUSER_sign_rcvr' => null,
			'date_sign_rcvr' => Yii::t('app', 'Date Sign Rcvr'),
			'note_rcvr' => Yii::t('app', 'Note'),
			'USER_idUSER_sign_apinv' => null,
			'date_sign_apinv' => Yii::t('app', 'Date Sign Apinv'),
			'note_apinv' => Yii::t('app', 'Note'),
			'price_checked' => Yii::t('app', 'Price Checked'),
			'order_date' => Yii::t('app', 'Order Date'),
			'estimated_delivery_date' => Yii::t('app', 'Estimated Delivery Date'),
			'confirmation_number' => Yii::t('app', 'Confirmation Number'),
			'completion_date' => Yii::t('app', 'Completion Date'),
			'is_billed' => Yii::t('app', 'Billed'),
			'invoice_number' => Yii::t('app', 'Invoice Number'),
			'cancel_reason' => Yii::t('app', 'Cancel Reason'),
			'datetime_cancel' => Yii::t('app', 'Datetime Cancelled'),
			'USER_idUSER_cancel' => Yii::t('app', 'Cancelled By'),
			'has_agreed_tos' => Yii::t('app', 'I Agree'),
			'attachmentDecApceos' => null,
			'attachmentDecApcorps' => null,
			'attachmentDecApmnls' => null,
			'attachmentOrders' => null,
			'attachmentReqs' => null,
			'reqDecisions' => null,
			'reqItemsPurchases' => null,
			'reqItemsServices' => null,
			'reqOrders' => null,
			'rEQTYPEIdREQTYPE' => null,
			'fACILITYIdFACILITY' => null,
			'pRIORITYIdPRIORITY' => null,
			'sTATUSIdSTATUS' => null,
			'uSERIdUSERSignReq' => null,
			'uSERIdUSERSignFceo' => null,
			'uSERIdUSERSignAdmin' => null,
			'uSERIdUSERSignApmnl' => null,
			'uSERIdUSERSignApcorp' => null,
			'uSERIdUSERSignApceo' => null,
			'uSERIdUSERSignPurch' => null,
			'uSERIdUSERSignRcvr' => null,
			'uSERIdUSERSignApinv' => null,
			'po_num' => Yii::t('app', 'P.O. #'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;
		
		$criteria->with = array('sTATUSIdSTATUS');

		$criteria->compare('t.idREQUISITION', $this->idREQUISITION, true);
		$criteria->compare('t.REQTYPE_idREQTYPE', $this->REQTYPE_idREQTYPE);
		$criteria->compare('t.FACILITY_idFACILITY', $this->FACILITY_idFACILITY);
		$criteria->compare('t.PRIORITY_idPRIORITY', $this->PRIORITY_idPRIORITY);
		$criteria->compare('t.priority_reason', $this->priority_reason, true);
		$criteria->compare('t.STATUS_idSTATUS', $this->STATUS_idSTATUS);
		$criteria->compare('t.title', $this->title, true);
		$criteria->compare('t.preferred_vendor', $this->preferred_vendor, true);
		$criteria->compare('t.project_name', $this->project_name, true);
		$criteria->compare('t.service_description', $this->service_description, true);
		$criteria->compare('t.USER_idUSER_sign_req', $this->USER_idUSER_sign_req);
		$criteria->compare('t.date_posted', $this->date_posted, true);
		$criteria->compare('t.USER_idUSER_sign_fceo', $this->USER_idUSER_sign_fceo);
		$criteria->compare('t.date_sign_fceo', $this->date_sign_fceo, true);
		$criteria->compare('t.note_fceo', $this->note_fceo, true);
		$criteria->compare('t.USER_idUSER_sign_admin', $this->USER_idUSER_sign_admin);
		$criteria->compare('t.date_sign_admin', $this->date_sign_admin, true);
		$criteria->compare('t.note_admin', $this->note_admin, true);
		$criteria->compare('t.USER_idUSER_sign_apmnl', $this->USER_idUSER_sign_apmnl);
		$criteria->compare('t.date_sign_apmnl', $this->date_sign_apmnl, true);
		$criteria->compare('t.note_apmnl', $this->note_apmnl, true);
		$criteria->compare('t.USER_idUSER_sign_apcorp', $this->USER_idUSER_sign_apcorp);
		$criteria->compare('t.date_sign_apcorp', $this->date_sign_apcorp, true);
		$criteria->compare('t.note_apcorp', $this->note_apcorp, true);
		$criteria->compare('t.USER_idUSER_sign_apceo', $this->USER_idUSER_sign_apceo);
		$criteria->compare('t.date_sign_apceo', $this->date_sign_apceo, true);
		$criteria->compare('t.note_apceo', $this->note_apceo, true);
		$criteria->compare('t.USER_idUSER_sign_purch', $this->USER_idUSER_sign_purch);
		$criteria->compare('t.date_sign_purch', $this->date_sign_purch, true);
		$criteria->compare('t.note_purch', $this->note_purch, true);
		$criteria->compare('t.USER_idUSER_sign_rcvr', $this->USER_idUSER_sign_rcvr);
		$criteria->compare('t.date_sign_rcvr', $this->date_sign_rcvr, true);
		$criteria->compare('t.note_rcvr', $this->note_rcvr, true);
		$criteria->compare('t.USER_idUSER_sign_apinv', $this->USER_idUSER_sign_apinv);
		$criteria->compare('t.date_sign_apinv', $this->date_sign_apinv, true);
		$criteria->compare('t.note_apinv', $this->note_apinv, true);
		$criteria->compare('t.price_checked', $this->price_checked);
		$criteria->compare('t.po_num', $this->po_num);
		$criteria->compare('t.order_date', $this->order_date, true);
		$criteria->compare('t.estimated_delivery_date', $this->estimated_delivery_date, true);
		$criteria->compare('t.confirmation_number', $this->confirmation_number,true);
		$criteria->compare('t.completion_date', $this->completion_date, true);
		$criteria->compare('t.is_billed', $this->is_billed);
		$criteria->compare('t.invoice_number', $this->invoice_number, true);
		$criteria->compare('t.cancel_reason', $this->cancel_reason, true);
		$criteria->compare('t.datetime_cancel', $this->datetime_cancel, true);
		$criteria->compare('t.USER_idUSER_cancel', $this->USER_idUSER_cancel);
		$criteria->compare('t.has_agreed_tos', $this->has_agreed_tos);
		
		//access filters
		//My facilities
		if(empty($this->FACILITY_idFACILITY)){
			$user = User::model()->findByPk(Yii::app()->user->getState('id'));
			$facilities = array();
			foreach($user->userFacilities as $fid){
				$facilities[] = $fid->FACILITY_idFACILITY;
			}
			$criteria->compare('t.FACILITY_idFACILITY', $facilities);
		}
		
		//FACILITY VIEW: initially show only N,W,A,WC,WE,P,R for facility staff or facility admin:hardcoded IDs from table status-1,2,3,9,10,6,R
		if(Yii::app()->user->getState('role')=='ST'||Yii::app()->user->getState('role')=='A'){
			if(empty($this->STATUS_idSTATUS)){
				$criteria->compare('t.STATUS_idSTATUS',array('1','2','3','9','10','6','7'));
			}
		}
		
		//AP VIEW: initially show only W,A,WC,WE,P,R,AE for AP:hardcoded IDs from table status-2,3,9,10,6,7,12
		if(Yii::app()->user->getState('role')=='S'||Yii::app()->user->getState('role')=='CL'){
			if(empty($this->STATUS_idSTATUS)){
				$criteria->compare('t.STATUS_idSTATUS',array('2','3','9','10','6','7','12'));
			}
		}
		
		//EIG PURCHASING VIEW: initially show only A:hardcoded IDs from table status-3
		if(Yii::app()->user->getState('role')=='M'){
			if(empty($this->STATUS_idSTATUS)){
				$criteria->compare('t.STATUS_idSTATUS',array('3'));
			}
		}
		
		//EDC PURCHASING VIEW: initially show only A:hardcoded IDs from table status-3
		if(Yii::app()->user->getState('role')=='EDC'){
			if(empty($this->STATUS_idSTATUS)){
				$criteria->compare('t.STATUS_idSTATUS',array('12'));
			}
		}

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
			'sort'=>array(
				'defaultOrder'=>'sTATUSIdSTATUS.ordering ASC, t.PRIORITY_idPRIORITY ASC, t.date_posted ASC',//sort by status, then by priority, then by date posted,, all in ascending order
			),

		));
	}
	
	//helpers
	public function getMyPurchaseItems(){
		$items = array();
		foreach($this->reqItemsPurchases as $i=>$item){
			$items[$i]['item_num'] = $item->item_num;
			$items[$i]['qty'] = $item->quantity;
			$items[$i]['unit'] = $item->unit;
			$items[$i]['item_name'] = $item->item_name;
			$items[$i]['specs'] = $item->specification;
			$items[$i]['price_estimate'] = $item->price_estimate;
			$items[$i]['reason'] = $item->reason;
			$items[$i]['subtotal'] = $item->quantity * $item->price_estimate;
		}
		return $items;
	}
	
	public function getMyVendors(){
		$vendors = array();
		foreach($this->reqItemsServices as $i=>$item){
			$vendors[$i]['vendor'] = $item->vendor;
			$vendors[$i]['qout'] = $item->qoutation;
		}
		return $vendors;
	}
	
	public function getPurchasedItems(){
		$items = array();
		foreach($this->reqItemsPurchases as $i=>$item){
			$items[$i]['item_num'] = $item->item_num;
			$items[$i]['is_purchased'] = ($item->is_purchased == '1') ? 'Yes' : 'No';
			$items[$i]['is_substitute'] = ($item->is_substitute == '1') ? 'Yes' : 'No';
			$items[$i]['price_availed'] = (Yii::app()->user->getState('role')== 'ST' or Yii::app()->user->getState('role')== 'A') ? '':$item->price_availed;//don't show to facility policy
			$items[$i]['vendor_availed_from'] =(Yii::app()->user->getState('role')== 'ST' or Yii::app()->user->getState('role')== 'A') ? '':$item->vendor_availed_from;//don't show to facility policy
		}
		return $items;
	}
	
	public function getApprovedVendors(){
		$items = array();
		foreach($this->reqItemsServices as $i=>$item){
			$items[$i]['vendor'] = $item->vendor;
			$items[$i]['qoutation'] = $item->qoutation;
			$items[$i]['is_approved'] = ($item->is_approved == '1') ? 'Yes' : 'No';
		}
		return $items;
	}
	
	public function getItemsTotal($id){
		$c = new CDbCriteria;
		$c->select = array("SUM( quantity * price_estimate ) AS items_total");
		$c->compare('REQUISITION_idREQUISITION',$id);
		$r = ReqItemsPurchase::model()->find($c);
		return $r->items_total;
	}
	
	public function getLargestQoutAmt(){
		$c = new CDbCriteria;
		$c->select = array("MAX(  `qoutation` ) AS largest");
		$c->compare('REQUISITION_idREQUISITION',$this->idREQUISITION);
		$r = ReqItemsService::model()->find($c);
		return $r->largest;
	}
	
	public function getMyAttachmentlinks(){
		$attch_links = "<ol>";
		foreach($this->attachmentReqs as $attc){
			$arr = explode("SEPX", $attc->filename, 2);
			$f_disp = $arr[0];
			//echo $f_disp; exit();
			$attch_links .= "<li>".CHtml::link($f_disp,Yii::app()->baseURL."/uploads_requisition/$attc->filename",array('target'=>'_blank')) .'</li>';
		}
		return $attch_links .= "</ol>";
	}
	
	public function getAttachmentFacAdmin(){
		$attch_links = "<ol>";
		foreach($this->attachmentFacAdmins as $attc){
			$arr = explode("SEPX", $attc->filename, 2);
			$f_disp = $arr[0];
			//echo $f_disp; exit();
			$attch_links .= "<li>".CHtml::link($f_disp,Yii::app()->baseURL."/uploads_requisition/$attc->filename",array('target'=>'_blank')) .'</li>';
		}
		return $attch_links .= "</ol>";
	}
	
	public function getAttachmentAPMNL(){
		$attch_links = "<ol>";
		foreach($this->attachmentDecApmnls as $attc){
			$arr = explode("SEPX", $attc->filename, 2);
			$f_disp = $arr[0];
			//echo $f_disp; exit();
			$attch_links .= "<li>".CHtml::link($f_disp,Yii::app()->baseURL."/uploads_requisition/$attc->filename",array('target'=>'_blank')) .'</li>';
		}
		return $attch_links .= "</ol>";
	}

	public function getAttachmentAPCORP(){
		$attch_links = "<ol>";
		foreach($this->attachmentDecApcorps as $attc){
			$arr = explode("SEPX", $attc->filename, 2);
			$f_disp = $arr[0];
			//echo $f_disp; exit();
			$attch_links .= "<li>".CHtml::link($f_disp,Yii::app()->baseURL."/uploads_requisition/$attc->filename",array('target'=>'_blank')) .'</li>';
		}
		return $attch_links .= "</ol>";
	}

	public function getAttachmentPurchasing(){
		$attch_links = "<ol>";
		foreach($this->attachmentOrders as $attc){
			$arr = explode("SEPX", $attc->filename, 2);
			$f_disp = $arr[0];
			//echo $f_disp; exit();
			$attch_links .= "<li>".CHtml::link($f_disp,Yii::app()->baseURL."/uploads_requisition/$attc->filename",array('target'=>'_blank')) .'</li>';
		}
		return $attch_links .= "</ol>";
	}
	
	public function getAttachmentInv(){
		$attch_links = "<ol>";
		foreach($this->attachmentInvs as $attc){
			$arr = explode("SEPX", $attc->filename, 2);
			$f_disp = $arr[0];
			//echo $f_disp; exit();
			$attch_links .= "<li>".CHtml::link($f_disp,Yii::app()->baseURL."/uploads_requisition/$attc->filename",array('target'=>'_blank')) .'</li>';
		}
		return $attch_links .= "</ol>";
	}

	public function generatePONumber(){
		return $this->fACILITYIdFACILITY->acronym.Yii::app()->user->id.$this->idREQUISITION;
	}

}