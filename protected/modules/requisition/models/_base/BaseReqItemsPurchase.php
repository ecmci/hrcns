<?php

/**
 * This is the model base class for the table "req_items_purchase".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "ReqItemsPurchase".
 *
 * Columns in table "req_items_purchase" available as properties of the model,
 * followed by relations of table "req_items_purchase" available as properties of the model.
 *
 * @property integer $idREQ_PURCHASE
 * @property integer $REQUISITION_idREQUISITION
 * @property string $item_num
 * @property integer $quantity
 * @property string $unit
 * @property string $item_name
 * @property string $specification
 * @property double $price_estimate
 * @property string $reason
 * @property integer $is_purchased
 * @property integer $is_substitute
 * @property string $vendor_availed_from
 * @property double $price_availed
 *
 * @property Requisition $rEQUISITIONIdREQUISITION
 */
abstract class BaseReqItemsPurchase extends GxActiveRecord {

	public $items_total;

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'req_items_purchase';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'ReqItemsPurchase|ReqItemsPurchases', $n);
	}

	public static function representingColumn() {
		return 'item_num';
	}

	public function rules() {
		return array(
			array('vendor_availed_from, price_availed', 'required','on'=>'signpurch'),
			
		
			array('item_num, quantity, unit, item_name, specification, price_estimate', 'required'),
			array('REQUISITION_idREQUISITION, quantity, is_purchased, is_substitute', 'numerical', 'integerOnly'=>true),
			array('price_estimate, price_availed', 'numerical'),
			array('price_estimate, quantity', 'numerical', 'min'=>1),
			array('item_num', 'length', 'max'=>25),
			array('unit', 'length', 'max'=>10),
			array('item_name, specification, reason, vendor_availed_from', 'length', 'max'=>100),
			array('reason, is_purchased, is_substitute, vendor_availed_from, price_availed', 'default', 'setOnEmpty' => true, 'value' => null),
			array('idREQ_PURCHASE, REQUISITION_idREQUISITION, item_num, quantity, unit, item_name, specification, price_estimate, reason, is_purchased, is_substitute, vendor_availed_from, price_availed', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'rEQUISITIONIdREQUISITION' => array(self::BELONGS_TO, 'Requisition', 'REQUISITION_idREQUISITION'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'idREQ_PURCHASE' => Yii::t('app', 'Id Req Purchase'),
			'REQUISITION_idREQUISITION' => null,
			'item_num' => Yii::t('app', 'Item Num'),
			'quantity' => Yii::t('app', 'Quantity'),
			'unit' => Yii::t('app', 'Unit'),
			'item_name' => Yii::t('app', 'Item Name'),
			'specification' => Yii::t('app', 'Specification'),
			'price_estimate' => Yii::t('app', 'Price Estimate'),
			'reason' => Yii::t('app', 'Reason'),
			'is_purchased' => Yii::t('app', 'Is Purchased'),
			'is_substitute' => Yii::t('app', 'Is Substitute'),
			'vendor_availed_from' => Yii::t('app', 'Vendor Availed From'),
			'price_availed' => Yii::t('app', 'Price Availed'),
			'rEQUISITIONIdREQUISITION' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('idREQ_PURCHASE', $this->idREQ_PURCHASE);
		$criteria->compare('REQUISITION_idREQUISITION', $this->REQUISITION_idREQUISITION);
		$criteria->compare('item_num', $this->item_num, true);
		$criteria->compare('quantity', $this->quantity);
		$criteria->compare('unit', $this->unit, true);
		$criteria->compare('item_name', $this->item_name, true);
		$criteria->compare('specification', $this->specification, true);
		$criteria->compare('price_estimate', $this->price_estimate);
		$criteria->compare('reason', $this->reason, true);
		$criteria->compare('is_purchased', $this->is_purchased);
		$criteria->compare('is_substitute', $this->is_substitute);
		$criteria->compare('vendor_availed_from', $this->vendor_availed_from, true);
		$criteria->compare('price_availed', $this->price_availed);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
	

}